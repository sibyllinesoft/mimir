# Docker Compose for Easy Mimir Installation
# This provides a complete containerized deployment of Mimir

version: '3.8'

services:
  mimir-server:
    image: mimir-server:latest
    container_name: mimir-server
    restart: unless-stopped
    ports:
      - "${MIMIR_PORT:-8000}:8000"
    volumes:
      # Persistent data storage
      - mimir-data:/app/data
      - mimir-cache:/app/cache
      - mimir-logs:/app/logs
      
      # Optional: Mount local repositories for indexing
      # Uncomment and adjust paths as needed
      # - "./repositories:/repositories:ro"
      
      # Optional: Custom configuration
      # - "./config:/app/config:ro"
    
    environment:
      # Core configuration
      - MIMIR_LOG_LEVEL=${MIMIR_LOG_LEVEL:-INFO}
      - MIMIR_MAX_WORKERS=${MIMIR_MAX_WORKERS:-4}
      - MIMIR_TIMEOUT=${MIMIR_TIMEOUT:-300}
      
      # Storage configuration
      - MIMIR_STORAGE_DIR=/app/data
      - MIMIR_CACHE_DIR=/app/cache
      
      # Security settings
      - MIMIR_ENABLE_SECURITY=${MIMIR_ENABLE_SECURITY:-true}
      - MIMIR_CORS_ORIGINS=${MIMIR_CORS_ORIGINS:-*}
      
      # Optional: Google Gemini API (if using AI features)
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      
      # Optional: Custom MCP server settings
      - MCP_SERVER_NAME=${MCP_SERVER_NAME:-mimir}
      - MCP_SERVER_VERSION=${MCP_SERVER_VERSION:-1.0.0}
    
    healthcheck:
      test: |
        python -c "
        import sys
        sys.path.insert(0, '/app/src')
        try:
            from repoindex.health import HealthChecker
            import asyncio
            result = asyncio.run(HealthChecker().check_all())
            exit(0 if result['status'] == 'healthy' else 1)
        except Exception as e:
            print(f'Health check failed: {e}')
            exit(1)
        "
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${MIMIR_MEMORY_LIMIT:-2G}
          cpus: '${MIMIR_CPU_LIMIT:-2.0}'
        reservations:
          memory: ${MIMIR_MEMORY_RESERVE:-512M}
          cpus: '${MIMIR_CPU_RESERVE:-0.5}'
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false  # Set to true if you want read-only container
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Labels for management
    labels:
      - "com.mimir.service=server"
      - "com.mimir.version=1.0.0"
      - "traefik.enable=false"  # Set to true if using Traefik

  # Optional: Web UI service (if UI features are enabled)
  mimir-ui:
    image: mimir-server:latest
    container_name: mimir-ui
    restart: unless-stopped
    command: ["python", "-m", "repoindex.ui.app"]
    ports:
      - "${MIMIR_UI_PORT:-8080}:8080"
    volumes:
      - mimir-data:/app/data:ro
      - mimir-logs:/app/logs
    
    environment:
      - MIMIR_LOG_LEVEL=${MIMIR_LOG_LEVEL:-INFO}
      - MIMIR_STORAGE_DIR=/app/data
      - MIMIR_SERVER_URL=http://mimir-server:8000
    
    depends_on:
      mimir-server:
        condition: service_healthy
    
    profiles:
      - ui  # Only start with --profile ui
    
    labels:
      - "com.mimir.service=ui"
      - "com.mimir.version=1.0.0"

  # Optional: Monitoring with Prometheus (development/testing)
  prometheus:
    image: prom/prometheus:latest
    container_name: mimir-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    
    profiles:
      - monitoring
    
    labels:
      - "com.mimir.service=monitoring"

  # Optional: Log aggregation with Grafana Loki
  loki:
    image: grafana/loki:latest
    container_name: mimir-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./ops/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    
    profiles:
      - logging
    
    labels:
      - "com.mimir.service=logging"

volumes:
  mimir-data:
    name: mimir-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MIMIR_DATA_DIR:-./data}
  
  mimir-cache:
    name: mimir-cache
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MIMIR_CACHE_DIR:-./cache}
  
  mimir-logs:
    name: mimir-logs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MIMIR_LOGS_DIR:-./logs}
  
  # Monitoring volumes
  prometheus-data:
    name: mimir-prometheus-data
    driver: local
  
  loki-data:
    name: mimir-loki-data
    driver: local

networks:
  default:
    name: mimir-network
    driver: bridge

# Configuration examples:
# 
# Basic usage:
#   docker-compose -f docker-compose.install.yml up -d
#
# With UI:
#   docker-compose -f docker-compose.install.yml --profile ui up -d
#
# With monitoring:
#   docker-compose -f docker-compose.install.yml --profile monitoring up -d
#
# With everything:
#   docker-compose -f docker-compose.install.yml --profile ui --profile monitoring --profile logging up -d
#
# Environment variables can be set in .env file:
#   MIMIR_PORT=8000
#   MIMIR_UI_PORT=8080
#   MIMIR_LOG_LEVEL=DEBUG
#   GOOGLE_API_KEY=your_api_key_here