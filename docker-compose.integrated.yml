# Mimir-Lens Integrated Production Deployment
# Complete container orchestration for both services with monitoring
version: '3.8'

services:
  # ==========================================================================
  # CORE SERVICES
  # ==========================================================================

  # Mimir Deep Code Research System
  mimir:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: mimir-server
    restart: unless-stopped
    
    environment:
      # Core configuration
      - MIMIR_STORAGE_DIR=/app/data
      - MIMIR_CACHE_DIR=/app/cache
      - MIMIR_LOG_LEVEL=${MIMIR_LOG_LEVEL:-INFO}
      - MIMIR_MAX_WORKERS=${MIMIR_MAX_WORKERS:-4}
      - MIMIR_TIMEOUT=${MIMIR_TIMEOUT:-300}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Lens integration
      - LENS_ENABLED=true
      - LENS_BASE_URL=http://lens:3000
      - LENS_TIMEOUT=30
      - LENS_MAX_RETRIES=3
      - LENS_HEALTH_CHECK_ENABLED=true
      - LENS_FALLBACK_ENABLED=true
      
      # Monitoring
      - MIMIR_ENABLE_METRICS=true
      - MIMIR_METRICS_PORT=9100
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=mimir
      - OTEL_SERVICE_VERSION=${MIMIR_VERSION:-1.0.0}
      
      # Database
      - DATABASE_URL=postgresql://mimir_user:${POSTGRES_PASSWORD:-mimir123}@postgres:5432/mimir
      - REDIS_URL=redis://redis:6379/0
    
    volumes:
      - mimir_data:/app/data
      - mimir_cache:/app/cache
      - mimir_logs:/app/logs
    
    ports:
      - "${MIMIR_PORT:-8000}:8000"
      - "${MIMIR_METRICS_PORT:-9100}:9100"
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      lens:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    networks:
      - integrated-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Lens High-Performance Search Service
  lens:
    build:
      context: /media/nathan/Seagate Hub/Projects/lens
      dockerfile: Dockerfile
    container_name: lens-server
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=3000
      - METRICS_PORT=9464
      
      # Message queue
      - NATS_URL=nats://nats:4222
      
      # Tracing
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=lens
      - OTEL_SERVICE_VERSION=${LENS_VERSION:-1.0.0}
      
      # Performance tuning
      - NODE_OPTIONS=--max-old-space-size=4096 --optimize-for-size
      - UV_THREADPOOL_SIZE=16
    
    volumes:
      - lens_data:/app/data
      - lens_segments:/app/segments
      - lens_cache:/app/cache
    
    ports:
      - "${LENS_PORT:-3000}:3000"
      - "${LENS_METRICS_PORT:-9464}:9464"
    
    depends_on:
      nats:
        condition: service_healthy
      jaeger:
        condition: service_started
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '6.0'
        reservations:
          memory: 2G
          cpus: '2.0'
    
    networks:
      - integrated-network

  # ==========================================================================
  # INFRASTRUCTURE SERVICES
  # ==========================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mimir-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=mimir
      - POSTGRES_USER=mimir_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mimir123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ops/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./ops/postgres/tuning.conf:/etc/postgresql/postgresql.conf:ro
    
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mimir_user -d mimir"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    networks:
      - integrated-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mimir-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --tcp-keepalive 60
    
    volumes:
      - redis_data:/data
      - ./ops/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 1.2G
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    networks:
      - integrated-network

  # NATS Message Queue
  nats:
    image: nats:2.10-alpine
    container_name: lens-nats
    restart: unless-stopped
    
    ports:
      - "${NATS_CLIENT_PORT:-4222}:4222"
      - "${NATS_HTTP_PORT:-8222}:8222"
      - "${NATS_ROUTING_PORT:-6222}:6222"
    
    command: [
      "--jetstream",
      "--store_dir=/data/jetstream",
      "--max_memory_store=2GB",
      "--max_file_store=20GB",
      "--cluster_name=lens_cluster",
      "--routes=nats://0.0.0.0:6222"
    ]
    
    volumes:
      - nats_data:/data/jetstream
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 2.5G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    networks:
      - integrated-network

  # ==========================================================================
  # MONITORING & OBSERVABILITY
  # ==========================================================================

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: integrated-prometheus
    restart: unless-stopped
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./ops/prometheus/prometheus.integrated.yml:/etc/prometheus/prometheus.yml:ro
      - ./ops/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    depends_on:
      - mimir
      - lens
    
    networks:
      - integrated-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: integrated-grafana
    restart: unless-stopped
    
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./ops/grafana/dashboards:/etc/grafana/dashboards:ro
    
    depends_on:
      - prometheus
    
    networks:
      - integrated-network

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: integrated-jaeger
    restart: unless-stopped
    
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_HTTP:-14268}:14268"
      - "${JAEGER_COLLECTOR_GRPC:-14250}:14250"
    
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    
    volumes:
      - jaeger_data:/badger
    
    networks:
      - integrated-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.86.0
    container_name: integrated-otel-collector
    restart: unless-stopped
    
    ports:
      - "${OTEL_GRPC_PORT:-4317}:4317"   # OTLP gRPC receiver
      - "${OTEL_HTTP_PORT:-4318}:4318"   # OTLP HTTP receiver
      - "${OTEL_METRICS_PORT:-8889}:8889" # Prometheus metrics
    
    volumes:
      - ./ops/otel/otel-collector-integrated.yaml:/etc/otelcol-contrib/otel-collector.yaml:ro
    
    command: ["--config=/etc/otelcol-contrib/otel-collector.yaml"]
    
    depends_on:
      - jaeger
      - prometheus
    
    networks:
      - integrated-network

  # Loki Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: integrated-loki
    restart: unless-stopped
    
    ports:
      - "${LOKI_PORT:-3100}:3100"
    
    volumes:
      - ./ops/loki/loki-integrated.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    
    command: -config.file=/etc/loki/local-config.yaml
    
    networks:
      - integrated-network

  # Promtail Log Shipper
  promtail:
    image: grafana/promtail:2.9.0
    container_name: integrated-promtail
    restart: unless-stopped
    
    volumes:
      - ./ops/promtail/promtail-integrated.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    
    command: -config.file=/etc/promtail/config.yml
    
    depends_on:
      - loki
    
    networks:
      - integrated-network

  # ==========================================================================
  # LOAD BALANCER & REVERSE PROXY
  # ==========================================================================

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: integrated-nginx
    restart: unless-stopped
    
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    volumes:
      - ./ops/nginx/nginx.integrated.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - mimir
      - lens
      - grafana
    
    networks:
      - integrated-network

# ==========================================================================
# VOLUMES
# ==========================================================================

volumes:
  # Application data
  mimir_data:
    driver: local
    driver_opts:
      type: none
      device: ${MIMIR_DATA_PATH:-./data/mimir}
      o: bind
  
  mimir_cache:
    driver: local
    driver_opts:
      type: none
      device: ${MIMIR_CACHE_PATH:-./cache/mimir}
      o: bind
  
  mimir_logs:
    driver: local
    driver_opts:
      type: none
      device: ${MIMIR_LOGS_PATH:-./logs/mimir}
      o: bind
  
  lens_data:
    driver: local
    driver_opts:
      type: none
      device: ${LENS_DATA_PATH:-./data/lens}
      o: bind
  
  lens_segments:
    driver: local
    driver_opts:
      type: none
      device: ${LENS_SEGMENTS_PATH:-./data/lens/segments}
      o: bind
  
  lens_cache:
    driver: local
  
  # Infrastructure data
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  loki_data:
    driver: local
  
  # Nginx logs
  nginx_logs:
    driver: local

# ==========================================================================
# NETWORKS
# ==========================================================================

networks:
  integrated-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mimir-lens-br0
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1