# Docker Compose Override for Production Environment
# Enhanced production configuration with monitoring and scaling

version: '3.8'

services:
  # Production MCP Server with enhanced configuration
  mimir-server:
    build:
      target: production
    
    # Production environment variables
    environment:
      - MIMIR_LOG_LEVEL=WARNING
      - MIMIR_MAX_WORKERS=8
      - MIMIR_TIMEOUT=600
      - MIMIR_ENABLE_METRICS=true
      - MIMIR_METRICS_PORT=9100
      - MIMIR_MAX_MEMORY_MB=1536
      - MIMIR_ENABLE_PROFILING=false
    
    # Enhanced resource limits for production
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Production volumes with specific mount options
    volumes:
      - ${MIMIR_DATA_PATH:-./data}:/app/data
      - ${MIMIR_CACHE_PATH:-./cache}:/app/cache
      - ${MIMIR_LOGS_PATH:-./logs}:/app/logs
    
    # Enhanced health check for production
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; import asyncio; from src.repoindex.mcp.server import MCPServer; server = MCPServer(); print('Production health check passed'); sys.exit(0)"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Production logging with structured format
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service,environment,version"
    
    # Enhanced security for production
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true

  # Production UI with reverse proxy ready configuration
  mimir-ui:
    environment:
      - MIMIR_UI_BEHIND_PROXY=true
      - MIMIR_UI_PROXY_HEADERS=true
      - MIMIR_ENABLE_METRICS=true
    
    # Only expose to internal network in production
    ports: []
    expose:
      - "8000"
    
    # Enhanced resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # Enhanced security for production
    security_opt:
      - no-new-privileges:true
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production Redis with persistence and clustering ready
  redis:
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 0
    
    # Enhanced resource limits
    deploy:
      resources:
        limits:
          memory: 600M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.2'
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # NGINX Reverse Proxy for production
  nginx:
    image: nginx:alpine
    container_name: mimir-nginx
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration
    volumes:
      - ./ops/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ops/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Dependencies
    depends_on:
      mimir-ui:
        condition: service_healthy
    
    # Network
    networks:
      - mimir-network

  # Enhanced Prometheus for production monitoring
  prometheus:
    volumes:
      - ./ops/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./ops/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    
    # Enhanced command for production
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=warn'
    
    # Health check for production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Security configuration
    security_opt:
      - no-new-privileges:true

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mimir-grafana
    restart: unless-stopped
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./ops/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Ports
    ports:
      - "3000:3000"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    
    # Dependencies
    depends_on:
      prometheus:
        condition: service_healthy
    
    # Network
    networks:
      - mimir-network

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: mimir-loki
    restart: unless-stopped
    
    # Configuration
    volumes:
      - ./ops/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    
    # Command
    command: -config.file=/etc/loki/local-config.yaml
    
    # Ports
    ports:
      - "3100:3100"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    
    # Network
    networks:
      - mimir-network

# Additional production volumes
volumes:
  nginx_logs:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local