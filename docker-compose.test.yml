# Simplified Mimir-Lens Test Deployment
version: '3.8'

services:
  # Core Database Services
  postgres:
    image: postgres:16-alpine
    container_name: mimir-postgres-test
    environment:
      POSTGRES_USER: mimir_user
      POSTGRES_PASSWORD: test_password_123
      POSTGRES_DB: mimir
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mimir_user -d mimir"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: mimir-redis-test
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Lens Service
  lens:
    build:
      context: /media/nathan/Seagate Hub/Projects/lens
      dockerfile: Dockerfile
    container_name: lens-server-test
    environment:
      NODE_ENV: development
      PORT: 3000
    ports:
      - "3001:3000"
    volumes:
      - lens_test_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # Mimir Service
  mimir:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: mimir-server-test
    environment:
      MIMIR_STORAGE_DIR: /app/data
      MIMIR_CACHE_DIR: /app/cache
      MIMIR_LOG_LEVEL: DEBUG
      PYTHONUNBUFFERED: 1
      
      # Lens integration
      LENS_ENABLED: true
      LENS_BASE_URL: http://lens:3000
      LENS_TIMEOUT: 30
      LENS_MAX_RETRIES: 3
      LENS_HEALTH_CHECK_ENABLED: true
      LENS_FALLBACK_ENABLED: true
      
      # Database
      DATABASE_URL: postgresql://mimir_user:test_password_123@postgres:5432/mimir
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8001:8000"
    volumes:
      - mimir_test_data:/app/data
      - mimir_test_cache:/app/cache
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      lens:
        condition: service_healthy

volumes:
  postgres_test_data:
  redis_test_data:
  lens_test_data:
  mimir_test_data:
  mimir_test_cache:

networks:
  default:
    driver: bridge