[project]
name = "mimir"
version = "1.0.0"
description = "Mimir - AI-Powered Code Research System for Claude Desktop"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Mimir Development Team", email = "dev@mimir.ai"},
]
maintainers = [
    {name = "Mimir Development Team", email = "dev@mimir.ai"},
]
license = {text = "MIT"}
keywords = ["repository", "indexing", "mcp", "ai", "code-analysis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Indexing",
]

# Core runtime dependencies with security annotations
dependencies = [
    # Core MCP Framework - Mission Critical  
    "mcp>=1.0.0,<2.0.0",  # Security: Actively maintained, compatible with Claude Code
    
    # Web Framework Stack - High Security Priority
    "fastapi>=0.116.1,<0.117.0",  # Security: Known CVE fixes in 0.116+
    "uvicorn[standard]>=0.35.0,<0.36.0",  # Security: TLS improvements in 0.35+
    "pydantic>=2.11.7,<3.0.0",  # Security: Input validation critical
    
    # Async I/O & Communication - Medium Security
    "asyncio-mqtt>=0.16.2,<0.17.0",  # Security: Connection security improvements
    "aiofiles>=24.1.0,<25.0.0",  # Security: Path traversal protections
    "httpx>=0.28.1,<0.29.0",  # Security: TLS verification improvements
    
    # Code Analysis & Processing - High Security
    "tree-sitter>=0.25.1,<0.26.0",  # Security: Memory safety in C bindings
    "tree-sitter-typescript>=0.23.2,<0.24.0",  # Security: Parser safety
    "tree-sitter-javascript>=0.23.1,<0.24.0",  # Security: Parser safety
    
    # Version Control & File Processing
    "GitPython>=3.1.45,<4.0.0",  # Security: Command injection fixes
    "msgpack>=1.1.1,<2.0.0",  # Security: Deserialization safety
    "zstandard>=0.24.0,<0.25.0",  # Security: Compression security
    
    # Cryptography & Security - Critical Security
    "cryptography>=45.0.6,<46.0.0",  # Security: CRITICAL - regular updates required
    
    # Data Processing & Analytics
    "numpy>=2.3.2,<3.0.0",  # Security: Buffer overflow fixes in 2.3+
    "ulid-py>=1.1.0,<2.0.0",  # Security: ID generation security
    
    # System Monitoring
    "psutil>=7.0.0,<8.0.0",  # Security: System info access controls
    
    # AI/ML Integration
    "google-generativeai>=0.8.5,<1.0.0",  # Security: API key handling improvements
    
    # HTTP client for Ollama and other services
    "aiohttp>=3.11.10,<4.0.0",  # Security: Async HTTP client with security fixes
    
    # Monitoring and tracing
    "sibylline-skald>=0.2.0,<1.0.0",  # Universal execution monitoring with NATS support
]

[project.optional-dependencies]
# Development tools with security considerations
dev = [
    # Testing Framework - Security: Test isolation
    "pytest>=8.4.1,<9.0.0",
    "pytest-asyncio>=0.25.0,<1.0.0",
    "pytest-cov>=6.0.0,<7.0.0",
    "pytest-benchmark>=5.1.0,<6.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "faker>=33.1.0,<34.0.0",
    
    # Code Quality & Formatting - Security: Code analysis
    "black>=24.10.0,<25.0.0",
    "ruff>=0.8.4,<1.0.0",
    "mypy>=1.13.0,<2.0.0",
    "pre-commit>=4.0.1,<5.0.0",
    
    # Development utilities
    "httpx>=0.28.1,<0.29.0",  # For API testing
]

# UI components with security hardening
ui = [
    "jinja2>=3.1.4,<4.0.0",  # Security: Template injection fixes
    "python-multipart>=0.0.20,<1.0.0",  # Security: File upload safety
]

# Production monitoring and performance
monitoring = [
    "prometheus-client>=0.21.1,<1.0.0",
    "structlog>=24.4.0,<25.0.0",
    "sentry-sdk>=2.19.2,<3.0.0",
    "nats-py>=2.10.0,<3.0.0",  # NATS JetStream for agent trace streaming
]

# Security scanning and validation tools
security = [
    "bandit[toml]>=1.8.0,<2.0.0",  # Security: Static analysis
    "safety>=3.6.0,<4.0.0",  # Security: Dependency vulnerability scanning
    "pip-audit>=2.7.4,<3.0.0",  # Security: Enhanced dependency auditing
    "semgrep>=1.100.0,<2.0.0",  # Security: Advanced SAST
]

# Performance benchmarking and profiling  
perf = [
    "pytest-benchmark>=5.1.0,<6.0.0",
    "memory-profiler>=0.63.0,<1.0.0",
    "py-spy>=0.4.0,<1.0.0",
    "cProfile-viewer>=1.1.1,<2.0.0",
]

# Documentation generation
docs = [
    "mkdocs>=1.6.1,<2.0.0",
    "mkdocs-material>=9.5.50,<10.0.0",
    "mkdocstrings[python]>=0.27.2,<1.0.0",
]

[project.scripts]
mimir-server = "repoindex.mcp.monitored_server:main"
mimir-server-basic = "repoindex.mcp.server:main"
mimir-ui = "repoindex.ui.app:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/repoindex"]

[tool.hatch.build.targets.wheel.force-include]
"src/repoindex/data/schema_files/manifest.json" = "repoindex/data/schema_files/manifest.json"
"src/repoindex/data/schema_files/symbol_entry.json" = "repoindex/data/schema_files/symbol_entry.json"

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "F821",  # undefined name (for type checking)
    "F401",  # unused imports in __init__.py files
    "N806",  # variable naming in tests
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011", "B018", "F401", "F841", "N806"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "performance: marks tests as performance tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Dependency groups for different deployment environments
[dependency-groups]
# Development environment - includes all tools for local development
dev = [
    "httpx>=0.28.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "ruff>=0.8.4",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
]

# Production environment - minimal security-focused dependencies
prod = [
    "structlog>=24.4.0,<25.0.0",
    "prometheus-client>=0.21.1,<1.0.0",
    "sentry-sdk>=2.19.2,<3.0.0",
]

# Security scanning and validation
security-scan = [
    "bandit[toml]>=1.8.0,<2.0.0",
    "safety>=3.6.0,<4.0.0",
    "pip-audit>=2.7.4,<3.0.0",
    "semgrep>=1.100.0,<2.0.0",
]

# Performance testing and monitoring
perf-test = [
    "pytest-benchmark>=5.1.0,<6.0.0",
    "memory-profiler>=0.63.0,<1.0.0",
    "py-spy>=0.4.0,<1.0.0",
]

# Security configuration and metadata
[tool.dependency-security]
# Critical security dependencies that require immediate updates
critical-packages = [
    "cryptography",
    "fastapi", 
    "pydantic",
    "uvicorn",
    "httpx"
]

# Security audit configuration
audit-policy = "strict"
vulnerability-threshold = "medium"  # Block on medium+ vulnerabilities
auto-update-security = true
security-scan-schedule = "daily"

# Package trust configuration
trusted-publishers = [
    "pypi.org",
    "github.com"
]

# Dependency pinning policy
pin-policy = "minor"  # Pin to minor versions for security deps
allow-pre-releases = false
require-hashes = false  # Enable for production builds

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "benchmarks", ".benchmarks"]
skips = ["B101", "B601"]  # Skip assert and shell injection in tests
severity = "medium"

[tool.bandit.assert_used]
skips = ["*_test.py", "*_tests.py", "test_*.py", "tests/*.py"]

# Safety configuration for vulnerability scanning
[tool.safety]
ignore = []  # Add CVE IDs to ignore specific vulnerabilities
full-report = true
output = "text"
continue-on-error = false

# pip-audit configuration
[tool.pip-audit]
require-hashes = false
desc = true
format = "json"
local = true
strict = true

# Semgrep configuration for advanced SAST
[tool.semgrep]
config = ["auto", "p/python", "p/security-audit", "p/secrets"]
exclude = ["tests/", "benchmarks/", ".benchmarks/"]
severity = ["ERROR", "WARNING"]
