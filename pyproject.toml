[project]
name = "repoindex"
version = "1.0.0"
description = "Deep Code Research System - MCP server for intelligent repository indexing"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "mcp==1.13.1",
    "asyncio-mqtt==0.16.2",
    "fastapi==0.116.1",
    "uvicorn==0.35.0",
    "pydantic==2.11.7",
    "aiofiles==24.1.0",
    "ulid-py==1.1.0",
    "tree-sitter==0.25.1",
    "tree-sitter-typescript==0.23.2",
    "tree-sitter-javascript==0.23.1",
    "GitPython==3.1.45",
    "msgpack==1.1.1",
    "zstandard==0.24.0",
    "numpy==2.3.2",
    "httpx==0.28.1",
    "psutil==7.0.0",
    "pytest-benchmark==5.1.0",
    "cryptography==45.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.4.0",
]
ui = [
    "jinja2>=3.1.2",
    "python-multipart>=0.0.6",
]
test = [
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.0",
    "faker>=19.6.0",
]

[project.scripts]
mimir-server = "repoindex.mcp.server:main"
mimir-ui = "repoindex.ui.app:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/repoindex"]

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "F821",  # undefined name (for type checking)
    "F401",  # unused imports in __init__.py files
    "N806",  # variable naming in tests
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011", "B018", "F401", "F841", "N806"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=1.1.0",
]
