#!/usr/bin/env python3
"""
RepoMapper CLI tool stub.

Provides basic repository structure analysis and file ranking
compatible with the RepoMapperAdapter expectations.
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Any, Dict, List


def get_version() -> str:
    """Return tool version."""
    return "repomapper 1.0.0"


def create_mock_repomap_data(repo_root: Path, files_list: List[str]) -> Dict[str, Any]:
    """Create mock RepoMap data structure."""
    file_ranks = []
    edges = []
    
    # Create file rankings with simple heuristics
    for i, file_path in enumerate(files_list):
        full_path = repo_root / file_path
        if not full_path.exists():
            continue
            
        # Simple ranking based on file size and type
        try:
            stat = full_path.stat()
            size_score = min(stat.st_size / 1000, 100) / 100  # Normalize to 0-1
            
            # Boost score for certain file types
            name_score = 1.0
            if file_path.endswith(('.py', '.ts', '.js', '.java')):
                name_score = 1.5
            elif file_path.endswith(('.md', '.txt', '.json')):
                name_score = 0.5
                
            rank = (size_score + name_score) / 2.5
            
            file_ranks.append({
                "path": file_path,
                "rank": rank,
                "centrality": rank * 0.8,  # Slightly lower centrality
                "dependencies": []  # Simple implementation
            })
            
        except OSError:
            continue
    
    # Create some mock dependency edges
    for i in range(min(len(file_ranks) - 1, 5)):  # Limit edges for simplicity
        source = file_ranks[i]["path"]
        target = file_ranks[i + 1]["path"] if i + 1 < len(file_ranks) else file_ranks[0]["path"]
        
        edges.append({
            "source": source,
            "target": target,
            "weight": 0.8,
            "type": "import"
        })
    
    return {
        "files": file_ranks,
        "edges": edges,
        "total_files": len(file_ranks),
        "analysis_time": 0.1
    }


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(description="Repository structure analysis tool")
    parser.add_argument("--version", action="store_true", help="Show version")
    parser.add_argument("--repo-root", type=str, help="Repository root directory")
    parser.add_argument("--files-list", type=str, help="File containing list of files to analyze")
    parser.add_argument("--focus-files", type=str, help="File containing list of focus files")
    parser.add_argument("--single-file", type=str, help="Analyze single file")
    parser.add_argument("--output", type=str, help="Output file path")
    parser.add_argument("--format", type=str, default="json", help="Output format")
    parser.add_argument("--include-edges", action="store_true", help="Include dependency edges")
    parser.add_argument("--include-symbols", action="store_true", help="Include symbol information")
    parser.add_argument("--page-rank", action="store_true", help="Calculate PageRank scores")
    parser.add_argument("--validate", action="store_true", help="Validate analysis")
    parser.add_argument("--stats-only", action="store_true", help="Statistics only")
    
    args = parser.parse_args()
    
    if args.version:
        print(get_version())
        sys.exit(0)
    
    if args.validate and args.stats_only:
        # Return validation statistics
        stats = {
            "total_files": 0,
            "total_symbols": 100,
            "parse_errors": 0,
            "circular_dependencies": 1
        }
        print(json.dumps(stats))
        sys.exit(0)
    
    if not args.repo_root:
        print("Error: --repo-root is required", file=sys.stderr)
        sys.exit(1)
    
    repo_root = Path(args.repo_root)
    if not repo_root.exists():
        print(f"Error: Repository root does not exist: {repo_root}", file=sys.stderr)
        sys.exit(1)
    
    # Read files list
    files_list = []
    if args.files_list:
        files_list_path = Path(args.files_list)
        if files_list_path.exists():
            with open(files_list_path) as f:
                files_list = [line.strip() for line in f if line.strip()]
    
    if args.single_file:
        # Single file analysis
        single_file = args.single_file
        result = {
            "file": single_file,
            "symbols": [
                {"name": "main", "type": "function", "line": 1},
                {"name": "helper", "type": "function", "line": 10}
            ],
            "imports": ["os", "sys"],
            "exports": ["main"]
        }
    else:
        # Repository analysis
        result = create_mock_repomap_data(repo_root, files_list)
    
    # Output results
    if args.output:
        with open(args.output, 'w') as f:
            json.dump(result, f, indent=2)
    else:
        print(json.dumps(result, indent=2))
    
    sys.exit(0)


if __name__ == "__main__":
    main()